{"version":3,"sources":["api.ts","store/currentTodo.ts","store/loading.ts","store/todos.ts","store/index.ts","components/TodoList.tsx","components/TodoFilter.tsx","components/Loader.tsx","components/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","actions","playload","type","todos","rootReducer","combineReducers","loading","action","selectedTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useSelector","loadTodo","dispatch","actionsLoading","peopleFromServer","actionsTodos","finally","TodoList","todoId","useDispatch","className","map","todo","classNames","id","completed","title","onClick","TodoFilter","query","status","onQueryChanged","onStatusChanged","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","onClose","useState","user","setUser","useEffect","userId","href","email","name","App","isLoading","state","setQuery","setStatus","lowerQuery","toLowerCase","visibleTodos","filter","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a30471f2.chunk.js","sourcesContent":["import { Todo, User } from './react-app-env';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Todo } from '../react-app-env';\n\ntype SelectTodoAction = {\n  type: 'SELECT_TODO',\n  playload: Todo,\n};\n\ntype UnSelectTodoAction = {\n  type: 'UNSELECT_TODO',\n};\n\ntype SelectedTodoAction = (SelectTodoAction | UnSelectTodoAction);\n\nexport const selectedTodoReducer = (\n  selectedTodo: Todo | null = null,\n  action: SelectedTodoAction,\n) => {\n  switch (action.type) {\n    case 'SELECT_TODO':\n      return action.playload;\n    case 'UNSELECT_TODO':\n      return null;\n    default:\n      return selectedTodo;\n  }\n};\n\nexport const actions = {\n  selectTodo: (playload: Todo):SelectTodoAction => (\n    { type: 'SELECT_TODO', playload }\n  ),\n  unselectTodo: ():UnSelectTodoAction => ({ type: 'UNSELECT_TODO' }),\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype LoadingAction = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\nexport const loadingRuducer = (loading = false, action: LoadingAction) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: ():StartLoadingAction => ({ type: 'START_LOADING' }),\n  finishLoading: ():FinishLoadingAction => ({ type: 'FINISH_LOADING' }),\n};\n","import { Todo } from '../react-app-env';\n\ntype SetTodosAction = {\n  type: 'setTodos',\n  playload: Todo [],\n};\n\ntype TodosAction = SetTodosAction;\n\nexport const todosReducer = (\n  todos: Todo[] = [],\n  action: TodosAction,\n): Todo [] => {\n  switch (action.type) {\n    case 'setTodos':\n      return action.playload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = {\n  setTodos: (todos: Todo []): SetTodosAction => ({\n    type: 'setTodos',\n    playload: todos,\n  }),\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport {\n  createStore, applyMiddleware, combineReducers,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { getTodos } from '../api';\nimport { selectedTodoReducer } from './currentTodo';\nimport { actions as actionsLoading, loadingRuducer } from './loading';\nimport { actions as actionsTodos, todosReducer } from './todos';\n\nconst rootReducer = combineReducers({\n  loading: loadingRuducer,\n  selectedTodo: selectedTodoReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\ntype RootState = ReturnType<typeof rootReducer>;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const loadTodo = (dispatch: typeof store.dispatch) => {\n  dispatch(actionsLoading.startLoading());\n  getTodos()\n    .then(\n      peopleFromServer => dispatch(\n        actionsTodos.setTodos(peopleFromServer),\n      ),\n    )\n    .finally(() => {\n      dispatch(actionsLoading.finishLoading());\n    });\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../react-app-env';\nimport { actions } from '../store/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n  todoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoId,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': todoId === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(actions.selectTodo(todo))}\n              >\n                <span className=\"icon\">\n                  {todoId === todo.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../react-app-env';\n\ntype Props = {\n  query: string,\n  onQueryChanged: (query: string) => void,\n  status: Status,\n  onStatusChanged: (status: Status) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n  onQueryChanged,\n  onStatusChanged,\n}) => {\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => onStatusChanged(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onQueryChanged(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChanged('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../api';\nimport { Todo, User } from '../react-app-env';\nimport { Loader } from './Loader';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose = () => {} }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport './App.scss';\nimport { Status } from './react-app-env';\nimport { loadTodo, useAppSelector } from './store';\nimport { actions } from './store/currentTodo';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const isLoading = useAppSelector(state => state.loading);\n  const selectedTodo = useAppSelector(state => state.selectedTodo);\n  const todos = useAppSelector(state => state.todos);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<Status>('all');\n\n  useEffect(() => {\n    dispatch(loadTodo);\n  }, []);\n\n  const lowerQuery = query.toLowerCase();\n\n  const visibleTodos = todos.filter(todo => {\n    if (status === 'active' && todo.completed) {\n      return false;\n    }\n\n    if (status === 'completed' && !todo.completed) {\n      return false;\n    }\n\n    return todo.title.toLowerCase().includes(lowerQuery);\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChanged={setQuery}\n                status={status}\n                onStatusChanged={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  todoId={selectedTodo?.id || 0}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={() => dispatch(actions.unselectTodo())}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}